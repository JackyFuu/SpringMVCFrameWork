<!DOCTYPE web-app PUBLIC
 "-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN"
 "http://java.sun.com/dtd/web-app_2_3.dtd" >

<web-app>
  <display-name>Archetype Created Web Application</display-name>
  <!-- Servlet容器会首先初始化Spring MVC的DispatcherServlet，在DispatcherServlet启动时，
       它根据配置WebConfig创建了一个类型是WebApplicationContext的IoC容器，
       完成所有Bean的初始化，并将容器绑到ServletContext上。 -->
  <!-- 初始化参数contextClass指定使用注解配置的AnnotationConfigWebApplicationContext，
       配置文件的位置参数contextConfigLocation指向WebConfig的完整类名，
       最后，把这个Servlet映射到/*，即处理所有URL。-->
  <!-- 因为DispatcherServlet持有IoC容器，能从IoC容器中获取所有@Controller的Bean，
       因此，DispatcherServlet接收到所有HTTP请求后，根据Controller方法配置的路径，
       就可以正确地把请求转发到指定方法，并根据返回的ModelAndView决定如何渲染页面。-->
  <servlet>
    <servlet-name>dispatcher</servlet-name>
    <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
    <init-param>
      <param-name>contextClass</param-name>
      <param-value>org.springframework.web.context.support.AnnotationConfigWebApplicationContext</param-value>
    </init-param>
    <init-param>
      <param-name>contextConfigLocation</param-name>
      <param-value>com.jacky.WebConfig</param-value>
    </init-param>
    <load-on-startup>0</load-on-startup>
  </servlet>

  <servlet-mapping>
    <servlet-name>dispatcher</servlet-name>
    <url-pattern>/*</url-pattern>
  </servlet-mapping>
</web-app>
